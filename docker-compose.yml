services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres:
    image: postgres:16.4
    environment:
      POSTGRES_USER: swiftshare
      POSTGRES_PASSWORD: swiftshare
      POSTGRES_DB: swiftshare
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7.2
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  prometheus:
    image: prom/prometheus:v2.55.0
    volumes:
      - ./infra/prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      DATABASE_URL: postgresql://swiftshare:swiftshare@postgres:5432/swiftshare?schema=public
      KAFKA_BROKERS: kafka:9092
      UPLOAD_DIR: /data/uploads
    volumes:
      - uploads:/data/uploads
    ports:
      - "3001:3000"
    command: npm run dev

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      retries: 5
      start_period: 20s
    depends_on: [postgres, kafka, redis]

volumes:
  pgdata:
  redisdata:
  uploads:

